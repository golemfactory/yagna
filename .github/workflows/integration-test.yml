name: Yagna tests (unit + integration)

on:
  push:
    branches:
      - master
      - payments-dev
      - release/*
  pull_request:
    branches:
      - master
      - payments-dev
      - release/*

env:
  rust_stable: 1.71.1

jobs:
  test_check:
    name: Check test results
    runs-on: ubuntu-latest
    steps:
      - name: Wait for build to succeed ( ubuntu )
        uses: tomchv/wait-my-workflow@v1.1.0
        id: wait-for-build-ubu
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: "Build binaries (x86-64)"
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
          intervalSeconds: 30
          timeoutSeconds: 3600

      - name: Fail if build was not a success ( ubuntu )
        run: echo job status= ${{ steps.wait-for-build-ubu.outputs.conclusion }} && ${{ fromJSON('["false", "true"]')[steps.wait-for-build-ubu.outputs.conclusion == 'success'] }}

  unit_tests:
    name: Unit Tests
    needs: test_check
    env:
      # `-D warnings` means any warnings emitted will cause build to fail
      RUSTFLAGS: "-C opt-level=z -C target-cpu=x86-64 -C debuginfo=1"
      X86_64_PC_WINDOWS_MSVC_OPENSSL_DIR: c:/vcpkg/installed/x64-windows
    runs-on: [yagna-builder, ubuntu-22.04]
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Install Rust ${{ env.rust_stable }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.rust_stable }}
          components: rustfmt, clippy

      - name: Extract branch name
        id: extract_branch
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT

      - name: Check lockfile
        uses: actions-rs/cargo@v1
        with:
          command: tree
          args: --locked

      - name: Set build target for cache
        id: setup_cache_target
        run: echo "build_target=${CARGO_BUILD_TARGET:-x86_64-unknown-linux-musl}" >> $GITHUB_OUTPUT

      - name: Install openssl ( Windows only )
        if: runner.os == 'Windows'
        run: |
          vcpkg install openssl:x64-windows openssl:x64-windows-static
          vcpkg list
          vcpkg integrate install

      - name: Load local cache
        continue-on-error: true
        run:
          # Uncomment line if you want need to clear cache
          #rm -rf "/opt/yagna_cache/${{ steps.extract_branch.outputs.branch }}/${{ steps.setup_cache_target.outputs.build_target }}/target"
          cp -rp "/opt/yagna_cache/unit_tests/${{ steps.extract_branch.outputs.branch }}/${{ steps.setup_cache_target.outputs.build_target }}/target" target

      - name: Unit tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace --exclude=["./agent/provider/src/market"] --locked

      - name: Save local cache
        run: |
          # copy to /opt/yagna_cache and preserve permissions and timestamps
          rsync -a --delete --mkpath target/ "/opt/yagna_cache/unit_tests/${{ steps.extract_branch.outputs.branch }}/${{ steps.setup_cache_target.outputs.build_target }}/target"

  integration-test-groups:
    name: Integration Tests (hybrid-net) group
    runs-on: [goth2, ubuntu-22.04]
    needs: test_check
    strategy:
      fail-fast: false
      matrix:
        group: [1, 2, 3, 4]
    defaults:
      run:
        working-directory: "./goth_tests"

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Configure Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: Configure Poetry
        uses: Gr1N/setup-poetry@v8
        with:
          poetry-version: 1.6.1
          working-directory: "./goth_tests"

      - name: Install dependencies
        run: |
          poetry install --no-root

      - name: Remove Docker containers
        continue-on-error: true
        run: docker rm -f $(docker ps -a -q)

      - name: Log in to GitHub Docker repository
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u ${{github.actor}} --password-stdin

      - name: Download artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: binaries-x86-64.yml
          commit: ${{github.event.pull_request.head.sha || github.sha}}
          workflow_conclusion: success
          name: "Yagna Linux"
          path: /tmp/yagna-build

      - name: Run test suite
        env:
          GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          poetry run poe goth-tests --splits 4 --group ${{ matrix.group }} --config-override docker-compose.build-environment.binary-path=/tmp/yagna-build

      - name: Upload test logs
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: goth-logs
          path: /tmp/goth-tests

      # Only relevant for self-hosted runners
      - name: Remove test logs
        if: always()
        run: rm -rf /tmp/goth-tests

      # Only relevant for self-hosted runners
      - name: Remove Poetry virtual env
        if: always()
        # Python version below should agree with the version set up by this job.
        # In the future we'll be able to use the `--all` flag here to remove envs for
        # all Python versions (https://github.com/python-poetry/poetry/issues/3208).
        run: poetry env remove --all

      - name: Remove Docker containers
        if: always()
        continue-on-error: true
        run: docker rm -f $(docker ps -a -q)

  integration-test:
    name: Integration Tests (hybrid-net)
    runs-on: ubuntu-latest
    needs: [integration-test-groups]
    steps:
      - name: Check status
        if: needs.integration-test-groups.result != 'success'
        run: exit 1
