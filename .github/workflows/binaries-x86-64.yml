name: Build binaries (x86-64)

on:
  workflow_dispatch:
    inputs:
      profile:
        description: 'Build profile'
        required: true
        default: 'debug'
      rust_version:
        description: 'Rust version'
        required: true
        default: '1.71.1'
  push:
    branches:
      - master
      - release/*
      - p2p-stability
      - '**/all-tests'
      - '**/integration-tests'
    inputs:
      profile:
        default: 'debug'
      rust_version:
  pull_request:
    branches:
      - master
      - release/*
      - p2p-stability

jobs:
  build:
    name: Build binaries (x86-64)
    env:
      # `-D warnings` means any warnings emitted will cause build to fail
      RUSTFLAGS: "-C opt-level=z -C target-cpu=x86-64 -C debuginfo=1"
    runs-on: [yagna-builder, ubuntu-22.04]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set input variables
        id: variables
        run: |
          echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
          echo "build_profile=${{ github.event.inputs.profile || debug }}" >> $GITHUB_OUTPUT
          echo "rust_version=${{ github.event.inputs.rust_version || 1.71.1 }}" >> $GITHUB_OUTPUT

      - name: Musl
        run: |
          sudo apt-get -y install musl musl-tools
          musl-gcc -v

      - name: Install Rust ${{ steps.variables.outputs.rust_version }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ steps.variables.outputs.rust_version }}
          components: rustfmt, clippy
          targets: x86_64-unknown-linux-musl

      - name: Load local cache
        continue-on-error: true
        run:
          # Uncomment line if you want need to clear cache
          # rm -rf "/opt/yagna_cache/${{ steps.variables.outputs.rust_version }}/${{ steps.variables.outputs.build_profile }}/${{ steps.variables.outputs.branch }}/binaries_x86/target"
          cp -rp "/opt/yagna_cache/${{ steps.variables.outputs.rust_version }}/${{ steps.variables.outputs.build_profile }}/${{ steps.variables.outputs.branch }}/binaries_x86/target" target

      - name: Build binaries
        run: |
          cargo build --profile ${{ steps.variables.outputs.build_profile }} --features static-openssl --target x86_64-unknown-linux-musl -p yagna -p ya-exe-unit -p gftp -p golemsp -p ya-provider

      - name: Copy and strip target binaries
        run: |
          mkdir build
          cp target/x86_64-unknown-linux-musl/${{ steps.variables.outputs.build_profile }}/{yagna,ya-provider,exe-unit,golemsp,gftp} build
          strip -x build/*

      - name: Upload binaries
        uses: actions/upload-artifact@v3
        with:
          name: Yagna ${{ runner.os }}
          path: build

      - name: Save local cache
        run: |
          # copy to /opt/yagna_cache and preserve permissions and timestamps
          rsync -a --delete --mkpath target/ "/opt/yagna_cache/${{ steps.variables.outputs.rust_version }}/${{ steps.variables.outputs.build_profile }}/${{ steps.variables.outputs.branch }}/binaries_x86/target"

