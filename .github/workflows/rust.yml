name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
      - release/*

jobs:
  build:
    name: Build
    env:
      RUSTFLAGS: "-D warnings -C opt-level=z -C target-cpu=x86-64 -C debuginfo=1"
      X86_64_PC_WINDOWS_MSVC_OPENSSL_DIR: c:/vcpkg/installed/x64-windows
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # was commented bc of too much spend on Macos which is counted 10x, Windows is 2x
        #os: [windows-latest, ubuntu-latest]
        os: [macos-latest, windows-latest, ubuntu-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Install Last Stable Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v1
        if: matrix.os != 'macos-latest'
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v1
        if: matrix.os != 'macos-latest'
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-

      - name: Cache cargo build
        uses: actions/cache@v1
        if: matrix.os != 'macos-latest'
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target1-${{ hashFiles('**/Cargo.lock') }}

      - name: cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Cache vcpkg's artifacts
        uses: actions/cache@v1
        if: matrix.os == 'windows-latest'
        with:
          path: c:/vcpkg/installed
          key: vcpkg-${{ runner.os }}-v0
          restore-keys: |
            vcpkg-${{ runner.os }}-

      - name: Install openssl
        if: matrix.os == 'windows-latest'
        run: |
          vcpkg install openssl:x64-windows openssl:x64-windows-static
          vcpkg list
          vcpkg integrate install

      - name: cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace

      - name: cargo test sgx
        if: matrix.os == 'ubuntu-latest'
        working-directory: exe-unit
        run: cargo test --features sgx

      - name: decentralized market test suite
        uses: actions-rs/cargo@v1
        if: startsWith( github.head_ref, 'market/' )
        with:
          command: test
          # Due to cargo quirks it is more efficient to run all tests from workspace as:
          #   --tests --workspace
          # than just:
          #   --tests -p ya-market
          # because the latter needs separate compilation of lots of dependant crates again.
          #
          # we use single thread (via macro), because GSB Router is a singleton shared among tests
          args: --tests --workspace --features ya-market/test-suite

      - name: cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --workspace

      - name: cargo build router
        uses: actions-rs/cargo@v1
        if: runner.os != 'Windows'
        with:
          command: build
          args: -p ya-sb-router --example ya_sb_router

      - name: Copy binaries Unix
        if: runner.os != 'Windows'
        run: |
          mkdir build
          cp target/debug/{yagna,ya-provider,exe-unit,golemsp} build
          cp target/debug/examples/ya_sb_router build
          strip -x build/*

      - name: Copy binaries Windows
        if: runner.os == 'Windows'
        run: |
          mkdir build
          copy target\debug\yagna.exe build
          copy target\debug\ya-provider.exe build
          copy target\debug\exe-unit.exe build

      - name: Upload binaries
        uses: actions/upload-artifact@v1
        with:
          name: Yagna ${{ runner.os }}
          path: build

#    - name: Clippy
#      uses: actions-rs/clippy-check@v1
#      with:
#        token: ${{ secrets.GITHUB_TOKEN }}
#        args: --all-features

  integration-test:
    name: Run integration tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          repository: 'golemfactory/goth'
          token: ${{ secrets.YAGNA_WORKFLOW_TOKEN }}

      - name: Configure python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Configure poetry
        uses: Gr1N/setup-poetry@v4
        with:
          poetry-version: 1.1.4

      - name: Install dependencies
        run: poetry install --no-root

      - name: Log in to GitHub Docker repository
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u ${{github.actor}} --password-stdin

      - name: Download yagna artifact
        uses: actions/download-artifact@v2
        with:
          name: 'Yagna Linux'
          path: /tmp/yagna-build

      - name: Run test suite
        env:
          GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # --assets-path: https://github.com/golemfactory/goth/issues/336
        run: poetry run poe ci_test

      - name: Upload test logs
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: goth-logs
          path: /tmp/goth-tests

      # Only relevant for self-hosted runners
      - name: Remove test logs
        if: always()
        run: rm -rf /tmp/goth-tests
