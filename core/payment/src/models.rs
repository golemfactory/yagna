// Generated by diesel_ext

#![allow(unused)]
#![allow(clippy::all)]


use crate::schema::*;
use chrono::NaiveDateTime;
use diesel::backend::Backend;
use diesel::serialize::{IsNull, Output, ToSql};
use diesel::sql_types::Integer;

#[derive(Queryable, Debug, Identifiable)]
#[table_name = "pay_allocation"]
pub struct Allocation {
    pub id: String,
    pub total_amount: i32,
    pub timeout: NaiveDateTime,
    pub make_deposit: bool,
}

#[derive(Queryable, Debug, Identifiable)]
#[table_name = "pay_debit_note"]
pub struct DebitNote {
    pub id: String,
    pub previous_debit_note_id: Option<String>,
    pub agreement_id: String,
    pub activity_id: Option<String>,
    pub status: String,
    pub timestamp: NaiveDateTime,
    pub total_amount_due: i32,
    pub usage_counter_vector: Option<Vec<u8>>,
    pub credit_account_id: String,
    pub payment_platform: Option<String>,
    pub payment_due_date: Option<NaiveDateTime>,
}

#[derive(Queryable, Debug, Identifiable)]
#[table_name = "pay_debit_note_event"]
#[primary_key(debit_note_id, event_type)]
pub struct DebitNoteEvent {
    pub debit_note_id: String,
    pub event_type: String,
    pub timestamp: NaiveDateTime,
    pub details: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[table_name = "pay_invoice"]
pub struct Invoice {
    pub id: String,
    pub last_debit_note_id: String,
    pub agreement_id: String,
    pub status: String,
    pub timestamp: NaiveDateTime,
    pub amount: String,
    pub usage_counter_vector: Option<Vec<u8>>,
    pub credit_account_id: String,
    pub payment_platform: Option<String>,
    pub payment_due_date: NaiveDateTime,
}

#[derive(Queryable, Debug, Identifiable)]
#[table_name = "pay_invoice_event"]
#[primary_key(invoice_id, event_type)]
pub struct InvoiceEvent {
    pub invoice_id: String,
    pub event_type: String,
    pub timestamp: NaiveDateTime,
    pub details: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[table_name = "pay_invoice_event_type"]
#[primary_key(event_type)]
pub struct InvoiceEventType {
    pub event_type: String,
}

#[derive(Queryable, Debug, Identifiable)]
#[table_name = "pay_invoice_status"]
#[primary_key(status)]
pub struct InvoiceStatus {
    pub status: String,
}

#[derive(Queryable, Debug, Identifiable)]
#[table_name = "pay_invoice_x_activity"]
#[primary_key(invoice_id, activity_id)]
pub struct InvoiceXActivity {
    pub invoice_id: String,
    pub activity_id: String,
}

#[derive(Queryable, Debug, Identifiable)]
#[table_name = "pay_payment"]
pub struct Payment {
    pub id: String,
    pub amount: i32,
    pub timestamp: NaiveDateTime,
    pub allocation_id: Option<String>,
    pub details: String,
}

#[derive(Queryable, Debug, Identifiable)]
#[table_name = "pay_payment_x_debit_note"]
#[primary_key(payment_id, debit_note_id)]
pub struct PaymentXDebitNote {
    pub payment_id: String,
    pub debit_note_id: String,
}

#[derive(Queryable, Debug, Identifiable)]
#[table_name = "pay_payment_x_invoice"]
#[primary_key(payment_id, invoice_id)]
pub struct PaymentXInvoice {
    pub payment_id: String,
    pub invoice_id: String,
}
