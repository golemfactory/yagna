openapi: 3.0.2
info:
  title: Yagna Payment API
  version: 1.0.0
  description: '
    Invoicing and Payments is a fundamental area of Yagna Ecosystem
    functionality. It includes aspects of communication between Requestor,
    Provider and a selected Payment Platform, which becomes crucial when
    Activities are executed in the context of negotiated Agreements. Yagna
    applications must be able to exercise various payment models, and the
    Invoicing/Payment-related communication is happening in parallel to
    Activity control communication. To define functional patterns of
    Requestor/Provider interaction in this area, Payment API is specified.


    An important principle of the Yagna Payment API is that the actual payment
    transactions are hidden behind the Invoice flow. In other words, a Yagna
    Application on Requestor side isn’t expected to trigger actual payment
    transactions. Instead it is expected to receive and accept Invoices raised
    by the Provider - based on Application’s Invoice Accept notifications, the
    Payment API implementation orchestrates the payment via a configured
    Payment platform.


    **NOTE: This specification is work-in-progress.**
'

servers:
  - url: /payment-api/v1

tags:
  - name: requestor
    description: Requestor part
  - name: provider
    description: Provider part

paths:

  /provider/debitNotes:
    post:
      tags:
        - provider
      summary: Issue a Debit Note.
      operationId: issueDebitNote
      requestBody:
        $ref: '#/components/requestBodies/DebitNote'
      responses:
        201:
          $ref: '#/components/responses/DebitNote'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/ServerError'

    get:
      tags:
        - provider
      summary: Get Debit Notes issued by this Provider.
      operationId: getIssuedDebitNotes
      responses:
        200:
          $ref: '#/components/responses/DebitNoteList'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/ServerError'

  /provider/debitNotes/{debitNodeId}:
    get:
      tags:
        - provider
      summary: Get Debit Note.
      operationId: getIssuedDebitNote
      parameters:
        - $ref: '#/components/parameters/debitNodeId'
      responses:
        200:
          $ref: '#/components/responses/DebitNote'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /provider/debitNotes/{debitNodeId}/payments:
    get:
      tags:
        - provider
      summary: Get Payments for Debit Note.
      operationId: getPaymentsForIssuedDebitNote
      parameters:
        - $ref: '#/components/parameters/debitNodeId'
      responses:
        200:
          $ref: '#/components/responses/PaymentList'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/ServerError'

  /provider/debitNotes/{debitNodeId}/send:
    post:
      tags:
        - provider
      summary: Send Debit Note to Requestor.
      operationId: sendDebitNote
      description: >
        This is a blocking operation. It will not return until the Requestor
        has acknowledged receiving the Debit Note or timeout has passed.
      parameters:
        - $ref: '#/components/parameters/debitNodeId'
        - $ref: '#/components/parameters/ackTimeout'
      responses:
        200:
          $ref: '#/components/responses/OK'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
        504:
          $ref: '#/components/responses/AckTimeout'

  /provider/debitNotes/{debitNodeId}/cancel:
    post:
      tags:
        - provider
      summary: Cancel Debit Note.
      operationId: cancelDebitNote
      description: >
        This is a blocking operation. It will not return until the Requestor
        has acknowledged cancelling the Debit Note or timeout has passed.
        The Requestor may refuse to cancel the Debit Note if they have already
        paid it.
      parameters:
        - $ref: '#/components/parameters/debitNodeId'
        - $ref: '#/components/parameters/ackTimeout'
      responses:
        200:
          $ref: '#/components/responses/OK'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        409:
          $ref: '#/components/responses/DebitNoteCancelRefused'
        500:
          $ref: '#/components/responses/ServerError'
        504:
          $ref: '#/components/responses/AckTimeout'

  /provider/debitNoteEvents:
    get:
      tags:
        - provider
      summary: Get Debit Note events.
      operationId: getProviderDebitNoteEvents
      description: >
        Listen for Debit Note-related events using long-polling. If there are
        any events the method will return them immediately. If there are none
        the method will wait until one appears or timeout passes.
        `laterThan` parameter can be used in order to get just the 'new' events.
        Setting the parameter value to the timestamp of the last processed event
        ensures that no events will go unnoticed.

      parameters:
        - $ref: '#/components/parameters/eventTimeout'
        - $ref: '#/components/parameters/laterThan'
      responses:
        200:
          $ref: '#/components/responses/InvoiceEventList'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/ServerError'

  /provider/invoices:
    post:
      tags:
        - provider
      summary: Issue an Invoice.
      operationId: issueInvoice
      requestBody:
        $ref: '#/components/requestBodies/Invoice'
      responses:
        201:
          $ref: '#/components/responses/Invoice'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/ServerError'

    get:
      tags:
        - provider
      summary: Get Invoices issued by this Provider.
      operationId: getIssuedInvoices
      responses:
        200:
          $ref: '#/components/responses/InvoiceList'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/ServerError'

  /provider/invoices/{invoiceId}:
    get:
      tags:
        - provider
      summary: Get Invoice.
      operationId: getIssuedInvoice
      parameters:
        - $ref: '#/components/parameters/invoiceId'
      responses:
        200:
          $ref: '#/components/responses/Invoice'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /provider/invoices/{invoiceId}/payments:
    get:
      tags:
        - provider
      summary: Get Payments for issued Invoice.
      operationId: getPaymentsForIssuedInvoice
      parameters:
        - $ref: '#/components/parameters/invoiceId'
      responses:
        200:
          $ref: '#/components/responses/PaymentList'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/ServerError'


  /provider/invoices/{invoiceId}/send:
    post:
      tags:
        - provider
      summary: Send Invoice to Requestor.
      operationId: sendInvoice
      description: >
        This is a blocking operation. It will not return until the Requestor
        has acknowledged receiving the Invoice or timeout has passed.
      parameters:
        - $ref: '#/components/parameters/invoiceId'
        - $ref: '#/components/parameters/ackTimeout'
      responses:
        200:
          $ref: '#/components/responses/OK'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
        504:
          $ref: '#/components/responses/AckTimeout'

  /provider/invoices/{invoiceId}/cancel:
    post:
      tags:
        - provider
      summary: Cancel Invoice.
      operationId: cancelInvoice
      description: >
        This is a blocking operation. It will not return until the Requestor
        has acknowledged cancelling the Invoice or timeout has passed.
        The Requestor may refuse to cancel the Invoice if they have already
        paid it.
      parameters:
        - $ref: '#/components/parameters/invoiceId'
        - $ref: '#/components/parameters/ackTimeout'
      responses:
        200:
          $ref: '#/components/responses/OK'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        409:
          $ref: '#/components/responses/InvoiceCancelRefused'
        500:
          $ref: '#/components/responses/ServerError'
        504:
          $ref: '#/components/responses/AckTimeout'

  /provider/invoiceEvents:
    get:
      tags:
        - provider
      summary: Get Invoice events.
      operationId: getProviderInvoiceEvents
      description: >
        Listen for Invoice-related events using long-polling. If there are
        any events the method will return them immediately. If there are none
        the method will wait until one appears or timeout passes.
        `laterThan` parameter can be used in order to get just the 'new' events.
        Setting the parameter value to the timestamp of the last processed event
        ensures that no events will go unnoticed.

      parameters:
        - $ref: '#/components/parameters/eventTimeout'
        - $ref: '#/components/parameters/laterThan'
      responses:
        200:
          $ref: '#/components/responses/InvoiceEventList'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/ServerError'

  /provider/payments:
    get:
      tags:
        - provider
      summary: Get incoming Payments.
      operationId: getIncomingPayments
      description: >
        Payments can be treated as events and this method can be used to listen
        for new payments by long-polling.  If there are any payments the method
        will return them immediately. If there are none the method will wait
        until one appears or timeout passes.
        `laterThan` parameter can be used in order to get just the 'new'
        payments. Setting the parameter value to the timestamp of the last
        processed payment ensures that no payments will go unnoticed.
      parameters:
        - $ref: '#/components/parameters/eventTimeout'
        - $ref: '#/components/parameters/laterThan'
      responses:
        200:
          $ref: '#/components/responses/PaymentList'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/ServerError'

  /provider/payments/{paymentId}:
    get:
      tags:
        - provider
      summary: Get incoming Payment.
      operationId: getIncomingPayment
      parameters:
        - $ref: '#/components/parameters/paymentId'
      responses:
        200:
          $ref: '#/components/responses/Payment'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /requestor/debitNotes:
    get:
      tags:
        - requestor
      summary: Get Debit Notes received by this Requestor.
      operationId: getReceivedDebitNotes
      responses:
        200:
          $ref: '#/components/responses/DebitNoteList'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/ServerError'

  /requestor/debitNotes/{debitNodeId}:
    get:
      tags:
        - requestor
      summary: Get Debit Note.
      operationId: getReceivedDebitNote
      parameters:
        - $ref: '#/components/parameters/debitNodeId'
      responses:
        200:
          $ref: '#/components/responses/DebitNote'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /requestor/debitNotes/{debitNodeId}/payments:
    get:
      tags:
        - requestor
      summary: Get Payments for Debit Note.
      operationId: getPaymentsForReceivedDebitNote
      parameters:
        - $ref: '#/components/parameters/debitNodeId'
      responses:
        200:
          $ref: '#/components/responses/PaymentList'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/ServerError'

  /requestor/debitNotes/{debitNodeId}/accept:
    post:
      tags:
        - requestor
      summary: Accept received Debit Note.
      operationId: acceptDebitNote
      description: >
        Send Debit Note Accepted message to Debit Note Issuer. Trigger payment
        orchestration for this Debit Note (using allocated lot identified by
        AllocationId if any).


        This is a blocking operation. It will not return until the Requestor
        has acknowledged accepting the Invoice or timeout has passed.


        NOTE: An Accepted Debit Note cannot be Rejected later.
      parameters:
        - $ref: '#/components/parameters/debitNodeId'
        - $ref: '#/components/parameters/ackTimeout'
      requestBody:
        $ref: '#/components/requestBodies/Acceptance'
      responses:
        200:
          $ref: '#/components/responses/OK'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
        504:
          $ref: '#/components/responses/AckTimeout'

  /requestor/debitNotes/{debitNodeId}/reject:
    post:
      tags:
        - requestor
      summary: Reject received Debit Note.
      operationId: rejectDebitNote
      description: >
        Send Debit Note Rejected message to Invoice Issuer. Notification of
        rejection is signalling that Requestor does not accept the Debit Note
        (for some reason).


        This is a blocking operation. It will not return until the Requestor
        has acknowledged rejecting the Invoice or timeout has passed.


        NOTE: A Rejected Debit Note can be Accepted subsequently (e.g. as a
        result of some arbitrage).

      parameters:
        - $ref: '#/components/parameters/debitNodeId'
        - $ref: '#/components/parameters/ackTimeout'
      requestBody:
        $ref: '#/components/requestBodies/Rejection'
      responses:
        200:
          $ref: '#/components/responses/OK'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
        504:
          $ref: '#/components/responses/AckTimeout'

  /requestor/debitNoteEvents:
    get:
      tags:
        - requestor
      summary: Get Debit Note events.
      operationId: getRequestorDebitNoteEvents
      description: >
        Listen for Debit Note-related events using long-polling. If there are
        any events the method will return them immediately. If there are none
        the method will wait until one appears or timeout passes.
        `laterThan` parameter can be used in order to get just the 'new' events.
        Setting the parameter value to the timestamp of the last processed event
        ensures that no events will go unnoticed.

      parameters:
        - $ref: '#/components/parameters/eventTimeout'
        - $ref: '#/components/parameters/laterThan'
      responses:
        200:
          $ref: '#/components/responses/DebitNoteEventList'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/ServerError'

  /requestor/invoices:
    get:
      tags:
        - requestor
      summary: Get Invoices received by this Requestor.
      operationId: getReceivedInvoices
      responses:
        200:
          $ref: '#/components/responses/InvoiceList'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/ServerError'

  /requestor/invoices/{invoiceId}:
    get:
      tags:
        - requestor
      summary: Get Invoice.
      operationId: getReceivedInvoice
      parameters:
        - $ref: '#/components/parameters/invoiceId'
      responses:
        200:
          $ref: '#/components/responses/Invoice'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /requestor/invoices/{invoiceId}/payments:
    get:
      tags:
        - requestor
      summary: Get Payments for received Invoice.
      operationId: getPaymentsForReceivedInvoice
      parameters:
        - $ref: '#/components/parameters/invoiceId'
      responses:
        200:
          $ref: '#/components/responses/PaymentList'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/ServerError'

  /requestor/invoices/{invoiceId}/accept:
    post:
      tags:
        - requestor
      summary: Accept received Invoice.
      operationId: acceptInvoice
      description: >
        Send Invoice Accepted message to Invoice Issuer. Trigger payment
        orchestration for this Invoice (using allocated lot identified by
        AllocationId if any).


        This is a blocking operation. It will not return until the Requestor
        has acknowledged rejecting the Invoice or timeout has passed.


        NOTE: An Accepted Invoice cannot be Rejected later.
      parameters:
        - $ref: '#/components/parameters/invoiceId'
        - $ref: '#/components/parameters/ackTimeout'
      requestBody:
        $ref: '#/components/requestBodies/Acceptance'
      responses:
        200:
          $ref: '#/components/responses/OK'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
        504:
          $ref: '#/components/responses/AckTimeout'

  /requestor/invoices/{invoiceId}/reject:
    post:
      tags:
        - requestor
      summary: Reject received Invoice.
      operationId: rejectInvoice
      description: >
        Send Invoice Rejected message to Invoice Issuer. Notification of
        rejection is signalling that Requestor does not accept Invoice
        (for some reason).


        This is a blocking operation. It will not return until the Requestor
        has acknowledged rejecting the Invoice or timeout has passed.


        NOTE: A Rejected Invoice can be Accepted subsequently (e.g. as a result
        of some arbitrage).

      parameters:
        - $ref: '#/components/parameters/invoiceId'
        - $ref: '#/components/parameters/ackTimeout'
      requestBody:
        $ref: '#/components/requestBodies/Rejection'
      responses:
        200:
          $ref: '#/components/responses/OK'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
        504:
          $ref: '#/components/responses/AckTimeout'

  /requestor/invoiceEvents:
    get:
      tags:
        - requestor
      summary: Get Invoice events.
      operationId: getRequestorInvoiceEvents
      description: >
        Listen for Invoice-related events using long-polling. If there are
        any events the method will return them immediately. If there are none
        the method will wait until one appears or timeout passes.
        `laterThan` parameter can be used in order to get just the 'new' events.
        Setting the parameter value to the timestamp of the last processed event
        ensures that no events will go unnoticed.

      parameters:
        - $ref: '#/components/parameters/eventTimeout'
        - $ref: '#/components/parameters/laterThan'
      responses:
        200:
          $ref: '#/components/responses/InvoiceEventList'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/ServerError'

  /requestor/allocations:
    post:
      tags:
        - requestor
      summary: Create Allocation.
      operationId: createAllocation
      description: Allocate funds to make sure they are not spent elsewhere.
      requestBody:
        $ref: '#/components/requestBodies/Allocation'
      responses:
        201:
          $ref: '#/components/responses/Allocation'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/ServerError'

    get:
      tags:
        - requestor
      summary: Get Allocations.
      operationId: getAllocations
      responses:
        200:
          $ref: '#/components/responses/AllocationList'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/ServerError'

  /requestor/allocations/{allocationId}:
    get:
      tags:
        - requestor
      summary: Get Allocation.
      operationId: getAllocation
      parameters:
        - $ref: '#/components/parameters/allocationId'
      responses:
        200:
          $ref: '#/components/responses/Allocation'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

    put:
      tags:
        - requestor
      summary: Amend Allocation.
      operationId: amendAllocation
      parameters:
        - $ref: '#/components/parameters/allocationId'
      requestBody:
          $ref: '#/components/requestBodies/Allocation'
      responses:
        200:
          $ref: '#/components/responses/Allocation'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

    delete:
      tags:
        - requestor
      summary: Release Allocation.
      operationId: releaseAllocation
      description: >
        The Allocation of amount is released. Note that this operation releases
        currently allocated amount (which may have been reduced by subsequent
        Invoice Payments).


        If the Allocation was connected with a Deposit the release amount from
        Deposit shall be marked as pending to be paid back to Requestor - and
        eventually will be paid back, unless a subsequent Allocation with
        Deposit is made. The Payment Platform implementations may optimize
        unnecessary fund transfers (i.e. will not pay back the Deposit if
        released funds can be assigned to a new Allocation with Deposit).

      parameters:
        - $ref: '#/components/parameters/allocationId'
      responses:
        200:
          $ref: '#/components/responses/OK'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /requestor/payments:
    get:
      tags:
        - requestor
      summary: Get outgoing Payments.
      operationId: getOutgoingPayments
      description: >
        Payments can be treated as events and this method can be used to listen
        for new payments by long-polling.  If there are any payments the method
        will return them immediately. If there are none the method will wait
        until one appears or timeout passes.
        `laterThan` parameter can be used in order to get just the 'new'
        payments. Setting the parameter value to the timestamp of the last
        processed payment ensures that no payments will go unnoticed.
      parameters:
        - $ref: '#/components/parameters/eventTimeout'
        - $ref: '#/components/parameters/laterThan'
      responses:
        200:
          $ref: '#/components/responses/PaymentList'
        401:
          $ref: '#/components/responses/Unauthorized'
        500:
          $ref: '#/components/responses/ServerError'

  /requestor/payments/{paymentId}:
    get:
      tags:
        - requestor
      summary: Get outgoing Payment.
      operationId: getOutgoingPayment
      parameters:
        - $ref: '#/components/parameters/paymentId'
      responses:
        200:
          $ref: '#/components/responses/Payment'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

components:

  parameters:

    debitNodeId:
      name: debitNodeId
      required: true
      in: path
      schema:
        type: string

    invoiceId:
      name: invoiceId
      required: true
      in: path
      schema:
        type: string

    allocationId:
      name: allocationId
      required: true
      in: path
      schema:
        type: string

    paymentId:
      name: paymentId
      required: true
      in: path
      schema:
        type: string

    ackTimeout:
      name: timeout
      description: >
        How many seconds server should wait for acknowledgement from the remote
        party (0 means forever)
      required: false
      in: query
      schema:
        type: integer
        minimum: 0
        default: 60

    eventTimeout:
      name: timeout
      description: >
        How many seconds server should wait for new events (0 means it should
        return immediately if there are no events)
      required: false
      in: query
      schema:
        type: integer
        minimum: 0
        default: 0

    laterThan:
      name: laterThan
      description: Show only events later than specified timeout
      in: query
      required: false
      schema:
        type: string
        format: date-time

  requestBodies:

    DebitNote:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DebitNote'

    Invoice:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Invoice'

    Allocation:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Allocation'

    Acceptance:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Acceptance'

    Rejection:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Rejection'

  responses:

    OK:
      description: OK

    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: 'error_message.yaml#/ErrorMessage'

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: 'error_message.yaml#/ErrorMessage'

    NotFound:
      description: Object not found
      content:
        application/json:
          schema:
            $ref: 'error_message.yaml#/ErrorMessage'

    ServerError:
      description: Server error
      content:
        application/json:
          schema:
            $ref: 'error_message.yaml#/ErrorMessage'

    AckTimeout:
      description: The Requestor has not responded to the request within timeout.
      content:
        application/json:
          schema:
            $ref: 'error_message.yaml#/ErrorMessage'

    DebitNoteCancelRefused:
      description: The Requestor has refused to cancel the Debit Note.
      content:
        application/json:
          schema:
            $ref: 'error_message.yaml#/ErrorMessage'

    DebitNote:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DebitNote'

    DebitNoteList:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/DebitNote'

    InvoiceCancelRefused:
      description: The Requestor has refused to cancel the Invoice.
      content:
        application/json:
          schema:
            $ref: 'error_message.yaml#/ErrorMessage'

    Invoice:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Invoice'

    InvoiceList:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Invoice'

    Allocation:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Allocation'

    AllocationList:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Allocation'

    Payment:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Allocation'

    PaymentList:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Payment'

    DebitNoteEventList:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/DebitNoteEvent'

    InvoiceEventList:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/InvoiceEvent'

  schemas:

    DebitNote:
      description: >
        A Debit Note is an artifact issued by the Provider to the Requestor,
        in the context of a specific Agreement. It is a notification of Total
        Amount Due incurred by Activities in this Agreement until the moment the
        Debit Note is issued. This is expected to be used as trigger for payment
        in upfront-payment or pay-as-you-go scenarios.


        NOTE: Debit Notes flag the current Total Amount Due, which is
        accumulated from the start of Agreement. Debit Notes are expected to
        trigger payments, therefore payment amount for the newly received Debit
        Note is expected to be determined by difference of Total Payments for
        the Agreement vs Total Amount Due.
      type: object
      properties:
        debitNoteId:
          type: string
          readOnly: true
        issuerId:
          type: string
          readOnly: true
        recipientId:
          type: string
          readOnly: true
        previousDebitNoteId:
          type: string
          readOnly: true
        timestamp:
          type: string
          format: date-time
          readOnly: true
        agreementId:
          type: string
        activityId:
          type: string
        totalAmountDue:
          type: string
        usageCounterVector:
          type: object
        creditAccountId:
          type: string
        paymentPlatform:
          type: string
        paymentDueDate:
          type: string
          format: date-time
        status:
          $ref: '#/components/schemas/InvoiceStatus'

      required:
        - debitNoteId
        - issuerId
        - recipientId
        - timestamp
        - agreementId
        - totalAmountDue
        - creditAccountId
        - status

    Invoice:
      description: >
        An Invoice is an artifact issued by the Provider to the Requestor, in
        the context of a specific Agreement. It indicates the total Amount owed
        by the Requestor in this Agreement. No further Debit Notes shall be
        issued after the Invoice is issued. The issue of Invoice signals the
        Termination of the Agreement (if it hasn't been terminated already).
        No Activity execution is allowed after the Invoice is issued.


        NOTE: An invoice can be issued even before any Activity is started in
        the context of an Agreement (eg. in one off, 'fire-and-forget' payment
        regime).
      type: object
      properties:
        invoiceId:
          type: string
          readOnly: true
        issuerId:
          type: string
          readOnly: true
        recipientId:
          type: string
          readOnly: true
        lastDebitNoteId:
          type: string
          readOnly: true
        timestamp:
          type: string
          format: date-time
          readOnly: true
        agreementId:
          type: string
        activityIds:
          type: array
          items:
            type: string
        amount:
          type: string
        usageCounterVector:
          type: object
        creditAccountId:
          type: string
        paymentPlatform:
          type: string
        paymentDueDate:
          type: string
          format: date-time
        status:
          $ref: '#/components/schemas/InvoiceStatus'

      required:
        - invoiceId
        - issuerId
        - recipientId
        - timestamp
        - agreementId
        - amount
        - creditAccountId
        - paymentDueDate
        - status

    InvoiceStatus:
      description: >
        Accepted status indicates that the Requestor confirms the Amount/Total
        Amount Due on the Invoice/Debit Note, respectively. The Payment API
        Implementation is expected to proceed with the orchestration of the
        payment. Internals of the payment processing (eg. payment processing
        internal states) are specific to the selected Payment Platform, and must
        be indicated as an attribute of the Accepted status. However, as they
        are specific - they shall not be standardized by the Payment API.


        A Rejected Invoice/Debit Note can subsequently be Accepted.


        An Accepted Invoice/Debit Note cannot be subsequently Rejected.


        There is a difference between Paid and Settled - depending on a Payment
        Platform. Paid indicates that the Requestor has ordered Payments of
        Total Amount Due as indicated by received/accepted Debit Notes/Invoice.
        Settled indicates that the Provider has reliably received the Payments.
      type: string
      enum:
        - ISSUED
        - RECEIVED
        - ACCEPTED
        - REJECTED
        - FAILED
        - SETTLED
        - CANCELLED
      readOnly: true

    Acceptance:
      description: Message sent when Requestor accepts a Debit Note or Invoice.
      type: object
      properties:
        totalAmountAccepted:
          type: string
        allocationId:
          type: string
      required:
        - totalAmountAccepted
        - allocationId

    Rejection:
      description: Message sent when Requestor rejects a Debit Note or Invoice.
      type: object
      properties:
        rejectionReason:
          $ref: '#/components/schemas/RejectionReason'
        totalAmountAccepted:
          type: string
        message:
          type: string
      required:
        - rejectionReason
        - totalAmountAccepted

    RejectionReason:
      description: Possible reasons to reject a Debit Note or Invoice.
      type: string
      enum:
        - UNSOLICITED_SERVICE
        - BAD_SERVICE
        - INCORRECT_AMOUNT

    Allocation:
      type: object
      description: ADD DESCRIPTION
      properties:
        allocationId:
          type: string
          readOnly: true
        totalAmount:
          type: string
        spentAmount:
          type: string
          readOnly: true
        remainingAmount:
          type: string
          readOnly: true
        timeout:
          type: string
          format: date-time
        makeDeposit:
          type: boolean
      required:
        - allocationId
        - totalAmount
        - spentAmount
        - remainingAmount
        - makeDeposit

    Payment:
      type: object
      description: ADD DESCRIPTION
      readOnly: true
      properties:
        paymentId:
          type: string
        payerId:
          type: string
        payeeId:
          type: string
        amount:
          type: string
        timestamp:
          type: string
          format: date-time
        allocationId:
          type: string
        debitNoteIds:
          type: array
          items:
            type: string
        invoiceIds:
          type: array
          items:
            type: string
        details:
          type: object
      required:
        - paymentId
        - payerId
        - payeeId
        - amount
        - timestamp
        - details

    DebitNoteEvent:
      type: object
      readOnly: true
      properties:
        debitNoteId:
          type: string
        timestamp:
          type: string
          format: date-time
        details:
          type: object
        eventType:
          $ref: '#/components/schemas/EventType'
      required:
        - debitNoteId
        - timestamp
        - eventType

    InvoiceEvent:
      type: object
      readOnly: true
      properties:
        invoiceId:
          type: string
        timestamp:
          type: string
          format: date-time
        details:
          type: object
        eventType:
          $ref: '#/components/schemas/EventType'
      required:
        - invoiceId
        - timestamp
        - eventType

    EventType:
      description: Types of Debit Note/Invoice events
      type: string
      enum:
        - RECEIVED
        - ACCEPTED
        - REJECTED
        - CANCELLED
