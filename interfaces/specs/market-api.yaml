openapi: 3.0.2
info:
  version: 1.5.2
  title: Yagna Market API
  description: '
    ## Yagna Market

    The Yagna Market is a core component of the Yagna Network, which enables
    computational Offers and Demands circulation. The Market is open for all
    entities willing to buy computations (Demands) or monetize computational
    resources (Offers).

    ## Yagna Market API

    The Yagna Market API is the entry to the Yagna Market through which
    Requestors and Providers can publish their Demands and Offers
    respectively, find matching counterparty, conduct negotiations
    and make an agreement.


    This version of Market API conforms with capability level 1 of the
    <a href="https://docs.google.com/document/d/1Zny_vfgWV-hcsKS7P-Kdr3Fb0dwfl-6T_cYKVQ9mkNg">
    Market API specification</a>.


    Market API contains two roles: Requestors and Providers which are
    symmetrical most of the time (excluding agreement phase).
'

servers:
  - url: /market-api/v1

security:
  - ApiKeyAuth: []

tags:
  - name: requestor
    description: Requestor part
  - name: provider
    description: Provider part


paths:


  /offers:
    get:
      tags:
        - provider
      summary: Fetches all active Offers which have been published by the Provider.
      description: >

      operationId: getOffers
      responses:
        '200':
          description: Offer list.
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/Offer'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/UnexpectedError'

    post:
      tags:
        - provider
      summary: Publishes Provider capabilities via Offer.
      description: >
        Offer object can be considered an "open" or public Offer, as it is not directed
        at a specific Requestor, but rather is sent to the market so that the matching
        mechanism implementation can associate relevant Demands.


        **Note**: it is an "atomic" operation, ie. as soon as Subscription is placed,
        the Offer is published on the market.
      operationId: subscribeOffer
      requestBody:
        $ref: '#/components/requestBodies/Offer'
      responses:
        '201':
          $ref: '#/components/responses/SubscriptionId'
          # links: TODO
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/UnexpectedError'


  /offers/{subscriptionId}:
    parameters:
      - $ref: '#/components/parameters/subscriptionId'
    delete:
      tags:
        - provider
      summary: Stop subscription for previously published Offer.
      description: >
        Stop receiving Proposals.


        **Note**: this will terminate all pending `collectDemands` calls on this subscription.
        This implies, that client code should not `unsubscribeOffer` before it has received
        all expected/useful inputs from `collectDemands`.
      operationId: unsubscribeOffer
      responses:
        '204':
          description: Offer revoked.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '410':
          description: Already unsubscribed.
        default:
          $ref: '#/components/responses/UnexpectedError'


  /offers/{subscriptionId}/events:
    parameters:
      - $ref: '#/components/parameters/subscriptionId'
      - $ref: '#/components/parameters/timeout'
      - $ref: '#/components/parameters/maxEvents'
    get:
      tags:
        - provider
      summary: Reads Market responses to published Offer.
      description: >
        This is a blocking operation. It will not return until there is at least one new event.


        **Note**: When `collectDemands` is waiting, simultaneous call to `unsubscribeOffer` on the
        same `subscriptionId` should result in "Subscription does not exist" error returned from
        `collectDemands`.


        **Note**: Specification requires this endpoint to support list of specific Proposal Ids
        to listen for messages related only to specific Proposals. This is not covered yet.
      operationId: collectDemands
      responses:
        '200':
          description: Proposal or Agreement event list.
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/AgreementEvent'
                    - $ref: '#/components/schemas/ProposalEvent'
                    - $ref: '#/components/schemas/PropertyQueryEvent'
              # links: TODO
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /offers/{subscriptionId}/propertyQuery/{queryId}:
    parameters:
      - $ref: '#/components/parameters/subscriptionId'
      - $ref: '#/components/parameters/queryId'
    post:
      tags:
        - provider
      summary: Handles dynamic property query.
      description: >
        The Market Matching Mechanism, when resolving the match relation for the
        specific Demand-Offer pair, is to detect the “dynamic” properties required
        (via constraints) by the other side. At this point, it is able to query the
        issuing node for those properties and submit the other side’s requested
        properties as the context of the query.


        **Note**: The property query responses may be submitted in “chunks”, ie. the
        responder may choose to resolve ‘quick’/lightweight’ properties faster and
        provide response sooner, while still working on more time-consuming properties
        in the background. Therefore the response contains both the resolved properties,
        as well as list of properties which responder knows still require resolution.


        **Note**: This method must be implemented for Market API Capability Level 2.
      operationId: postQueryReplyOffers
      requestBody:
        $ref: '#/components/requestBodies/PropertyQueryReply'
      responses:
        '204': 
          description: OK, query reply posted.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /offers/{subscriptionId}/proposals/{proposalId}:
    parameters:
      - $ref: '#/components/parameters/subscriptionId'
      - $ref: '#/components/parameters/proposalId'
    get:
      tags:
        - provider
      summary: Fetches Proposal (Demand) with given id.
      operationId: getProposalDemand
      responses:
        '200':
          $ref: '#/components/responses/Proposal'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '410':
          description: Proposal rejected.
        default:
          $ref: '#/components/responses/UnexpectedError'
    delete:
      tags:
        - provider
      summary: Rejects Proposal (Demand).
      description: >
        Effectively ends a Negotiation chain - it explicitly indicates that the sender
        will not create another counter-Proposal.
      operationId: rejectProposalDemand
      responses:
        '204':
          description: Proposal rejected.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '410':
          description: Proposal already rejected.
        default:
          $ref: '#/components/responses/UnexpectedError'
    post:
      tags:
        - provider
      summary: Responds with a bespoke Offer to received Demand.
      description: >
        Creates and sends a modified version of original Offer (a
        counter-proposal) adjusted to previously received Proposal (ie. Demand).
        Changes Proposal state to `Draft`. Returns created Proposal id.
      operationId: counterProposalOffer
      requestBody:
        $ref: '#/components/requestBodies/Proposal'
      responses:
        '201':
          $ref: '#/components/responses/ProposalId'
          # links: TODO
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '410':
          description: Proposal rejected.
        default:
          $ref: '#/components/responses/UnexpectedError'

  /demands:
    get:
      tags:
        - requestor
      summary: Fetches all active Demands which have been published by the Requestor.
      description: >

      operationId: getDemands
      responses:
        '200':
          description: Demand list.
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/Demand'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/UnexpectedError'

    post:
      tags:
        - requestor
      summary: Publishes Requestor capabilities via Demand.
      description: >
        Demand object can be considered an "open" or public Demand, as it is not directed
        at a specific Provider, but rather is sent to the market so that the matching
        mechanism implementation can associate relevant Offers.


        **Note**: it is an "atomic" operation, ie. as soon as Subscription is placed,
        the Demand is published on the market.
      operationId: subscribeDemand
      requestBody:
        $ref: '#/components/requestBodies/Demand'
      responses:
        '201':
          $ref: '#/components/responses/SubscriptionId'
          # links: TODO
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/UnexpectedError'


  /demands/{subscriptionId}:
    parameters:
      - $ref: '#/components/parameters/subscriptionId'
    delete:
      tags:
        - requestor
      summary: Stop subscription for previously published Demand.
      description: >
        Stop receiving Proposals.


        **Note**: this will terminate all pending `collectOffers` calls on this subscription.
        This implies, that client code should not `unsubscribeDemand` before it has received
        all expected/useful inputs from `collectOffers`.
      operationId: unsubscribeDemand
      responses:
        '204':
          description: Demand revoked.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '410':
          description: Already unsubscribed.
        default:
          $ref: '#/components/responses/UnexpectedError'


  /demands/{subscriptionId}/events:
    parameters:
      - $ref: '#/components/parameters/subscriptionId'
      - $ref: '#/components/parameters/timeout'
      - $ref: '#/components/parameters/maxEvents'
    get:
      tags:
        - requestor
      summary: Reads Market responses to published Demand.
      description: >
        This is a blocking operation. It will not return until there is at least one new event.


        **Note**: When `collectOffers` is waiting, simultaneous call to `unsubscribeDemand` on the
        same `subscriptionId` should result in "Subscription does not exist" error returned from
        `collectOffers`.


        **Note**: Specification requires this endpoint to support list of specific Proposal Ids
        to listen for messages related only to specific Proposals. This is not covered yet.
      operationId: collectOffers
      responses:
        '200':
          description: Proposal event list.
          content:
            application/json4:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/ProposalEvent'
                    - $ref: '#/components/schemas/PropertyQueryEvent'

          # links: TODO
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /demands/{subscriptionId}/propertyQuery/{queryId}:
    parameters:
      - $ref: '#/components/parameters/subscriptionId'
      - $ref: '#/components/parameters/queryId'
    post:
      tags:
        - requestor
      summary: Handles dynamic property query.
      description: >
        The Market Matching Mechanism, when resolving the match relation for the
        specific Demand-Offer pair, is to detect the “dynamic” properties required
        (via constraints) by the other side. At this point, it is able to query the
        issuing node for those properties and submit the other side’s requested
        properties as the context of the query.


        **Note**: The property query responses may be submitted in “chunks”, ie. the
        responder may choose to resolve ‘quick’/lightweight’ properties faster and
        provide response sooner, while still working on more time-consuming properties
        in the background. Therefore the response contains both the resolved properties,
        as well as list of properties which responder knows still require resolution.


        **Note**: This method must be implemented for Market API Capability Level 2.
      operationId: postQueryReplyDemands
      requestBody:
        $ref: '#/components/requestBodies/PropertyQueryReply'
      responses:
        '204': 
          description: OK, query reply posted.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /demands/{subscriptionId}/proposals/{proposalId}:
    parameters:
      - $ref: '#/components/parameters/subscriptionId'
      - $ref: '#/components/parameters/proposalId'
    get:
      tags:
        - requestor
      summary: Fetches Proposal (Offer) with given id.
      operationId: getProposalOffer
      responses:
        '200':
          $ref: '#/components/responses/Proposal'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '410':
          description: Proposal rejected.
        default:
          $ref: '#/components/responses/UnexpectedError'
    delete:
      tags:
        - requestor
      summary: Rejects Proposal (Offer).
      description: >
        Effectively ends a Negotiation chain - it explicitly indicates that the sender
        will not create another counter-Proposal.
      operationId: rejectProposalOffer
      responses:
        '204':
          description: Proposal rejected.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '410':
          description: Proposal already rejected.
        default:
          $ref: '#/components/responses/UnexpectedError'
    post:
      tags:
        - requestor
      summary: Responds with a bespoke Demand to received Offer.
      description: >
        Creates and sends a modified version of original Demand (a
        counter-proposal) adjusted to previously received Proposal (ie. Offer).
        Changes Proposal state to `Draft`. Returns created Proposal id.
      operationId: counterProposalDemand
      requestBody:
        $ref: '#/components/requestBodies/Proposal'
      responses:
        '201':
          $ref: '#/components/responses/ProposalId'
          # links: TODO
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '410':
          description: Proposal rejected.
        default:
          $ref: '#/components/responses/UnexpectedError'


  /agreements:
    post:
      tags:
        - requestor
      summary: Creates Agreement from selected Proposal.
      description: >
        Initiates the Agreement handshake phase.


        Formulates an Agreement artifact from the Proposal indicated by the
        received Proposal Id.


        The Approval Expiry Date is added to Agreement artifact and implies
        the effective timeout on the whole Agreement Confirmation sequence.


        A successful call to `createAgreement` shall immediately be followed
        by a `confirmAgreement` and `waitForApproval` call in order to listen
        for responses from the Provider.


        **Note**: Moves given Proposal to `Approved` state.
      operationId: createAgreement
      requestBody:
        $ref: '#/components/requestBodies/AgreementProposal'
      responses:
        '201':
          description: Agreement created.
          content:
            application/json:
              schema:
                type: string
                description: Agreement Id
          links:
            GetAgreementById:
              description: The response value can be used to fetch Agreement in `GET /agreement/{agreementId}`
              operationId: getAgreement
              #operationRef: '#/paths/~1agreements~1{agreementId}/get'
              parameters:
                agreementId: '$response.body'
            # TODO: more links
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/UnexpectedError'


  /agreements/{agreementId}:
    parameters:
      - $ref: '#/components/parameters/agreementId'
    get:
      tags:
        - requestor
        - provider
      summary: Fetches agreement with given agreement id.
      operationId: getAgreement
      responses:
        '200':
          description: Agreement.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agreement'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
    delete:
      tags:
        - requestor
      summary: Cancels agreement.
      description: >
        Causes the awaiting `waitForApproval` call to return with `Cancelled` response.
      operationId: cancelAgreement
      responses:
        '204':
          description: Agreement cancelled.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Agreement already approved.
        default:
          $ref: '#/components/responses/UnexpectedError'


  /agreements/{agreementId}/confirm:
    parameters:
      - $ref: '#/components/parameters/agreementId'
    post:
      tags:
        - requestor
      summary: Sends Agreement draft to the Provider.
      description: >
        Signs Agreement self-created via `createAgreement` and sends it to the Provider.
      operationId: confirmAgreement
      responses:
        '204':
          description: Agreement confirmed.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '410':
          description: Agreement cancelled.
        default:
          $ref: '#/components/responses/UnexpectedError'


  /agreements/{agreementId}/wait:
    parameters:
      - $ref: '#/components/parameters/agreementId'
      - $ref: '#/components/parameters/timeout'
    post:
      tags:
        - requestor
      summary: Waits for Agreement approval by the Provider.
      description: >
        This is a blocking operation. The call may be aborted by Requestor caller
        code. After the call is aborted, another `waitForApproval` call can be
        raised on the same Agreement Id.


        It returns one of the following options:

        * `Ok` - Indicates that the Agreement has been approved by the Provider.
          - The Provider is now ready to accept a request to start an Activity
            as described in the negotiated agreement.
          - The Requestor’s corresponding `waitForApproval` call returns Ok after
            this on the Provider side.

        * `Rejected` - Indicates that the Provider has called `rejectAgreement`,
          which effectively stops the Agreement handshake. The Requestor may attempt
          to return to the Negotiation phase by sending a new Proposal.

        * `Cancelled` - Indicates that the Requestor himself has called
         `cancelAgreement`, which effectively stops the Agreement handshake.

      operationId: waitForApproval
      responses:
        '200':
          description: Agreement approval result.
          content:
            application/json:
              schema:
                type: string
                enum: [Approved, Rejected, Cancelled, TimedOut]
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'


  /agreements/{agreementId}/approve:
    parameters:
      - $ref: '#/components/parameters/agreementId'
      - $ref: '#/components/parameters/timeout'
    post:
      tags:
        - provider
      summary: Approves Agreement proposed by the Reqestor.
      description: >
        This is a blocking operation. The call may be aborted by Provider caller
        code. After the call is aborted or timed out, another `approveAgreement`
        call can be raised on the same `agreementId`.

        It returns one of the following options:

        * `Ok` - Indicates that the approved Agreement has been successfully
        delivered to the Requestor and acknowledged.
          - The Requestor side has been notified about the Provider’s commitment
            to the Agreement.
          - The Provider is now ready to accept a request to start an Activity
            as described in the negotiated agreement.
          - The Requestor’s corresponding ConfirmAgreement call returns Ok after
            the one on the Provider side.

        * `Cancelled` - Indicates that before delivering the approved Agreement,
        the Requestor has called `cancelAgreement`, thus invalidating the
        Agreement. The Provider may attempt to return to the Negotiation phase
        by sending a new Proposal.


        **Note**: It is expected from the Provider node implementation to “ring-fence”
        the resources required to fulfill the Agreement before the ApproveAgreement
        is sent. However, the resources should not be fully committed until `Ok`
        response is received from the `approveAgreement` call.


        **Note**: Mutually exclusive with `rejectAgreement`.
      operationId: approveAgreement
      responses:
        '204':
          description: Agreement approved.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Agreement already rejected.
        '410':
          description: Agreement cancelled by the Requstor.
        default:
          $ref: '#/components/responses/UnexpectedError'


  /agreements/{agreementId}/reject:
    parameters:
      - $ref: '#/components/parameters/agreementId'
    post:
      tags:
        - provider
      summary: Rejects Agreement proposed by the Requestor.
      description: >
        The Requestor side is notified about the Provider’s decision to reject
        a negotiated agreement. This effectively stops the Agreement handshake.


        **Note**: Mutually exclusive with `approveAgreement`.
      operationId: rejectAgreement
      responses:
        '204':
          description: Agreement rejected.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Agreement already approved.
        '410':
          description: Agreement cancelled by the Requstor.
        default:
          $ref: '#/components/responses/UnexpectedError'


  /agreements/{agreementId}/terminate:
    parameters:
      - $ref: '#/components/parameters/agreementId'
    post:
      tags:
        - provider
        - requestor
      summary: Terminates approved Agreement.
      operationId: terminateAgreement
      responses:
        '204':
          description: Agreement terminated.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Agreement not in Approved state.
        '410':
          description: Agreement cancelled by the Requstor.
        default:
          $ref: '#/components/responses/UnexpectedError'



components:



  securitySchemes:


    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY


  parameters:


    subscriptionId:
      name: subscriptionId
      in: path
      required: true
      schema:
        type: string

    queryId:
      name: queryId
      in: path
      required: true
      schema:
        type: string

    proposalId:
      name: proposalId
      in: path
      required: true
      schema:
        type: string

    timeout:
      name: timeout
      in: query
      schema:
        type: number
        format: float

    maxEvents:
      name: maxEvents
      in: query
      schema:
        type: integer
        format: int32

    agreementId:
      name: agreementId
      in: path
      required: true
      schema:
        type: string


  requestBodies:


    Offer:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Offer'

    Demand:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Demand'

    Proposal:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Proposal'

    AgreementProposal:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AgreementProposal'

    PropertyQueryReply:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PropertyQueryReply'


  responses:


    SubscriptionId:
      description: Subscribed.
      content:
        application/json:
          schema:
            type: string
            description: Subscription id

    Proposal:
      description: Proposal.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Proposal'

    ProposalId:
      description: Counter Proposal created.
      content:
        application/json:
          schema:
            type: string
            description: Proposal Id

    BadRequest:
      description: Bad request.
      content:
        application/json:
          schema:
            $ref: 'error_message.yaml#/ErrorMessage'

    Unauthorized:
      description: Authorization information is missing or invalid.
      content:
        application/json:
          schema:
            $ref: 'error_message.yaml#/ErrorMessage'

    NotFound:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: 'error_message.yaml#/ErrorMessage'

    UnexpectedError:
      description: Unexpected error.
      content:
        application/json:
          schema:
            $ref: 'error_message.yaml#/ErrorMessage'

  schemas:

    DemandOfferBase:
      type: object
      required:
        - properties
        - constraints
      properties:
        properties:
          type: object
        constraints:
          type: string

    Demand:
      allOf:
        - $ref: '#/components/schemas/DemandOfferBase'
        - type: object
          properties:
            demandId:
              type: string
              readOnly: true
            requestorId:
              type: string
              readOnly: true

    Offer:
      allOf:
        - $ref: '#/components/schemas/DemandOfferBase'
        - type: object
          properties:
            offerId:
              type: string
              readOnly: true
            providerId:
              type: string
              readOnly: true

    # TODO: add specified OfferProposal and DemandProposal to disabiguate API
    Proposal:
      allOf:
        - $ref: '#/components/schemas/DemandOfferBase'
        - type: object
          properties:
            proposalId:
              type: string
              readOnly: true
            issuerId:
              type: string
              readOnly: true
            state:
              type: string
              readOnly: true
              enum: [Initial, Draft, Rejected, Accepted, Expired]
              description: >
                * `Initial` - proposal arrived from the market as response
                to subscription

                * `Draft` - bespoke counter-proposal issued by one party
                directly to other party (negotiation phase)

                * `Rejected` by other party

                * `Accepted` - promoted into the Agreement draft

                * `Expired` - not accepted nor rejected before validity period
            prevProposalId:
              type: string
              description: >
                id of the proposal from other side which this proposal responds to

    AgreementProposal:
      type: object
      required:
        - proposalId
        - validTo
      properties:
        proposalId:
          type: string
          description: id of the proposal to be promoted to the Agreement
        validTo:
          type: string
          format: date-time
          description: >
            End of validity period. Agreement needs to be accepted, rejected or
            cancellled before this date; otherwise will expire

    Agreement:
      type: object
      required:
        - agreementId
        - demand
        - offer
        - validTo
        - state
      properties:
        agreementId:
          type: string
        demand:
          $ref: '#/components/schemas/Demand'
        offer:
          $ref: '#/components/schemas/Offer'
        validTo:
          type: string
          format: date-time
          description: >
            End of validity period. Agreement needs to be accepted, rejected or
            cancellled before this date; otherwise will expire
        approvedDate:
          type: string
          format: date-time
          description: date of the Agreement approval
        state:
          type: string
          enum: [Proposal, Pending, Cancelled, Rejected, Approved, Expired, Terminated]
          description: >
            * `Proposal` - newly created by a Requestor (based on Proposal)

            * `Pending` - confirmed by a Requestor and send to Provider for approval

            * `Cancelled` by a Requestor

            * `Rejected` by a Provider

            * `Approved` by both sides

            * `Expired` - not accepted, rejected nor cancelled within validity period

            * `Terminated` - finished after approval.
        proposedSignature:
          type: string
        approvedSignature:
          type: string
        committedSignature:
          type: string

    PropertyQuery:
      type: object
      properties:
        issuerProperties:
          type: object
        queryId:
          type: string
        queriedProperties:
          uniqueItems: false
          type: array
          items:
            type: string

    PropertyQueryReply:
      type: object

    Event:
      type: object
      required:
        - eventType
        - eventDate
      discriminator:
        propertyName: eventType
      properties:
        eventType:
          type: string
        eventDate:
          type: string
          format: date-time

    ProposalEvent:
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
          properties:
            proposal:
              $ref: '#/components/schemas/Proposal'

    AgreementEvent:
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
          properties:
            agreement:
              $ref: '#/components/schemas/Agreement'

    PropertyQueryEvent:
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
      properties:
        propertyQuery:
          $ref: '#/components/schemas/PropertyQuery'
